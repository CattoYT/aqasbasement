---
import Layout from '../../../../../layouts/Layout.astro';
import Table from '../../../../../components/Table.astro';
---

<Layout title="2.5 - Languages and IDEs">
    <h1>2.5 - Languages and IDEs</h1>
    <h2>Levels of languages</h2>
    <p>
        - There are two levels of languages: high level, and low level.<br>
        - High level languages are easier to read, write and understand, but 
        are harder for computers to process and must be run through a compiler 
        (translates the high level language into a low level language).<br>
        - Low level languages are harder to read, write and understand, but are 
        easier for computers to process and do not need a compiler. Low level
        languages were the first programming langauges, and programming took a 
        long time.
    </p>
    <h3>Low-Level Languages</h3>
    <p>
        - Low level languages either are, or resemble, machine code.<br>
        - They use 'instructions', which are commands that the CPU understand.<br>
        - Originally, programming had to be done <b>directly</b> in machine code. 
        This means that the programmer had to write the code in binary.<br>
        - Later on, assembly language was created, which is a low level language 
        that resembles machine code, but is easier to read and write.<br>
        - It has to be translated (through an <b>assembler</b>) into machine code 
        before it can be run on the computer, but it is very easy to predict what 
        will come out.<br>
        - It looks like this:
        <img class="centreimage" src="/images/cs/assembly.webp" alt="Hello World in Assembly">
    </p>
    <Table>
        <thead>
            <tr>
                <th>Advantages of Assembly</th>
                <th>Disadvantages of Assembly</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <ul>
                        <li>Easier to read</li>
                        <li>Easier to write</li>
                        <li>Machine code is easy to predict</li>
                    </ul>
                </td>
                <td>
                    <ul>
                        <li>Still requires manual memory management</li>
                        <li>Still requires an assembler</li>
                        <li>Still requires platform-specific code</li>
                        <li>Prone to (cryptic) errors</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </Table>
    <br>
    <h3>High-Level Languages</h3>
    <p>
        - High level languages are easier to read, write and understand, but are 
        harder for computers to process and must be run through a compiler.<br>
        - Languages like C, C++, Java, Python, OCR Reference Language, JavaScript, 
        and pretty much any 'programming language' you would use are high level.<br>
        - Despite the fact that the generate machine code may be less efficient, 
        this is generally not an issue due to advancements in processing power 
        and memory capacity.<br>
        - One 'standard library' instruction can be many machine code instructions.
    </p>
    <Table>
        <thead>
            <tr>
                <th>Advantages</th>
                <th>Disadvantages</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <ul>
                        <li>Easiest to read</li>
                        <li>Easiest to write</li>
                        <li>A lot easier to debug</li>
                        <li>Not architecture dependent</li>
                        <li>One line can be many machine code instructions</li>
                    </ul>
                </td>
                <td>
                    <ul>
                        <li>Harder to predict machine code</li>
                        <li>Less efficient</li>
                        <li>Needs to be compiled</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </Table>
    <h2>Translators (Compilers and Interpreters)</h2>
    <p>
        - A translator is a program that translates source code into machine code.<br>
        - The translator required by low-level languages (such as assembly) is 
        called an assembler.<br>
        - The translator required by compiled high-level languages (such as C) is called 
        a compiler.<br>
        - The translator required by interpreted high-level languages (such as Python) is called 
        an interpreter.<br>
    </p>
    <h3>Compilers</h3>
    <p>
        - Compilers translate source code into machine code <b>before</b> it is run.<br>
        - Compiled code can be distributed as executable files and run directly.<br>
        - If errors are found during compilation, or if any changes are made, the 
        entire thing will need to be recompiled, which can take a long time.
    </p>
    <Table>
        <thead>
            <tr>
                <th>Advantages</th>
                <th>Disadvantages</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <ul>
                        <li>Source does not need to be available</li>
                        <li>Can be distributed without runtimes</li>
                        <li>Fast to run</li>
                        <li>Pre-run optimisation carried out</li>
                    </ul>
                </td>
                <td>
                    <ul>
                        <li>Everything needs to be recompiled when changes are made</li>
                        <li>Difficult to debug</li>
                        <li>Executables work on only one platform and architecture</li>
                        <li>Compilation can be memory-intensive</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </Table>
    <h3>Interpreters</h3>
    <p>
        - Interpreters are programs that translate source code into machine code 
        <b>during</b> its running.<br>
        - They go line-by-line, and if any errors are found, they will stop and 
        display an error message.<br>
        - Programs run with interpreters are usually slower than compiled code, but they are easier 
        to debug.<br>
        - Interpreted code is more difficult to distribute, since it requires a runtime 
        environment to run, for example the Python interpreter.
    </p>
    <Table>
        <thead>
            <tr>
                <th>Advantages</th>
                <th>Disadvantages</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <ul>
                        <li>Easiest to debug</li>
                        <li>Not platform-dependent</li>
                        <li>Does not require recompilation every time</li>
                        <li>Less RAM needed for processing code</li>
                    </ul>
                </td>
                <td>
                    <ul>
                        <li>Slower than compiled code</li>
                        <li>Requires a runtime environment</li>
                        <li>Often takes more system resources</li>
                        <li>No pre-run optimisation can be carried out</li>
                    </ul>
                </td>
            </tr>
        </tbody>
    </Table>
    <br>
    <h2>IDEs</h2>
    <p>
        - An IDE, or Integrated Development Environment, is a software application 
        that are designed to make writing code easier and more efficient.<br>
        - There are multiple different facilites available within IDEs:
        <ul>
            <li>Editors</li>
            <li>Error diagnostics</li>
            <li>Runtime environments</li>
            <li>Translators</li>
        </ul>
    </p>
    <h3>Editors</h3>
    <p>
        - The 'editor' component of an IDE is the part that allows you to write 
        code.<br>
        - They will usually have syntax highlighting, which will make it easier to 
        read code, by highlighting key words.<br>
        <div class="table-container">
            <img src="/images/cs/autocomplete.png" alt="autocomplete"><sub>(lmao)</sub>
        </div>
        - IDEs also automatically indent code, and automatically add ending 
        brackets when you type an opening bracket, add ending quotes when you type 
        an opening quote, etc.
    </p>
    <h3>Error diagnostics</h3>
    <p>
        - Error diagnostics are a feature of an IDE that will display error messages 
        when there are errors in your code.<br>
        - They will also highlight the line where the error is, and will underline 
        the error in the code.<br>
        - This has some overlap with runtime environments, as errors in your code #
        during runtime (not detected beforehand) will be highlighted.<br>
        - This is useful for finding errors in your code, and for fixing them.
    </p>
    <h3>Runtime environments</h3>
    <p>
        - Runtime environments are a feature of an IDE that will allow you to run 
        your code.<br>
        - They will have the normal start-stop buttons you expect, but a decent 
        IDE will also have a 'debug' option, which allow you to run your code 
        line-by-line, and stop at any errors.
    </p>
    <sub>I apologise for the repetition in these but they overlap way too much</sub>
    <h3>Translators</h3>
    <p>
        - IDEs will have built-in translators, so you can run your code without 
        having to leave the IDE.
    </p>
    <br>
    <p>
        <b>end of the course.</b> woop woop
    </p>
</Layout>