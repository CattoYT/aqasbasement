---
import Layout from "../../../../../layouts/Layout.astro";
---

<Layout title="2.2 - Programming Fundamentals (Part 2)">
    <h1>2.2 - Programming Fundamentals (Part 2)</h1>
    <h2>String Manipulation</h2>
    <p>
        - Programs may have to modify, extract or analyse information from
        strings.<br>
        - Examples of string manipulation include:
        <ul>
            <li>Changing the case of a string</li>
            <li>Extracting a substring</li>
            <li>ASCII conversion</li>
            <li>Concatenation (con-cat-en-ation)</li>
            <li>Getting the length of a string</li>
        </ul>
    </p>
    <h3>Changing the case of a string</h3>
    <p>
        - <b>To change the case of a string</b>, use the <code>lower()</code> or
        <code>upper()</code> functions on a string.<br>
        - For example, with <code>exampleString = "Hello"</code>, 
        <code>exampleString.lower()</code> will return "hello".
    </p>
    <h3>Concatenation (con-cat-en-ation)</h3>
    <p>
        - <b>To concatenate two strings</b>, use the <code>+</code> operator.<br>
        - For example, <code>"Hello " + "World"</code> will return "Hello World".
        (Note the space within the "Hello " string.)
    </p>
    <h3>Extracting a substring</h3>
    <p>
        - <b>Extracting a substring</b> is different in OCR Exam Reference Language
        and Python.
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString.substring(0, 5) // "Hello"
exampleString.left(5) // "Hello"
exampleString.right(5) // "World"</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString[0:5] # "Hello"
exampleString[:5] # "Hello"
exampleString[5:] # "World"</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h3>ASCII conversion</h3>
    <p>
        - <b>To convert a string to ASCII</b>:
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
ASC("A") // 65
CHR(65) // A</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
ord("A") # 65
chr(65) # A</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h3>Getting the length of a string</h3>
    <p>
        - <b>To get the length of a string</b>:
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString.length // 11</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
len(exampleString) # 11</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h2>File Handling</h2>
    <p>
        - To handle (read, write and append) files you must first open the file,
        then read/write, then close the file.<br>
        - (you'll need to scroll sideways to see second half the table if it doesn't fit on the screen, 
        you can do that with all tables but this is the first one that doesn't fit on a 1080p screen)
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
newFile("example.txt") // creates example.txt
file = open("example.txt") // opens example.txt

file.write("Hello World") // writes "Hello World" to example.txt
print(file.read()) // prints "Hello World" by first reading example.txt and then printing it

file.writeline("Line 1") // writes "Line 1" to example.txt at line 1
file.writeline("Line 2") // writes "Line 2" to example.txt at line 2
file.writeline("Line 4") // will still write "Line 4", but to line 3 (since no line 3 exists yet)

print(file.readline()) // prints "Line 1" by first reading example.txt and then printing it
print(file.readline()) // prints "Line 2"

file.close() // closes example.txt and frees up memory
</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
file = open("example.txt", "w") # opens example.txt for writing, creates it if it doesn't exist
file.write("Hello World") # writes "Hello World" to example.txt
file.close() # closes example.txt and frees up memory

with open("example.txt", "r") as file: # opens example.txt for reading
    print(file.read()) # prints "Hello World"

file = open("example.txt", "a") # opens example.txt for appending, creates it if it doesn't exist
file.write("\nHello World") # appends "\nHello World" to example.txt (\n means newline)
file.close()

# readline and writeline are done the same way as OCR Reference Language
                            </pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h2>Records to Store Data</h2>
    <p>
        - Sometimes you will need to store data in a record, for example, if you
        need to store the name and age of a person.
    </p>
    <h3>Databases</h3>
    <p>
        - A database is a collection of fields (one slot of data) and records 
        (a collection of fields all for one thing), 
        each record is a set of data
        stored in a particular format.<br>
        - Most of the time databases use 'tables' to store records.<br>
        - Databases are faster and more secure than simply using text files.
    </p>
    <h3>Text Files</h3>
    <p>>
        - Text files can be used to store data but this is not recommended for 
        large datasets due to having to parse them and issues with splitting text.
    <h3>Arrays</h3>
    <p>
        - Arrays are useful when working with small amounts of data, 
        for example, a list of names, or a list of numbers.<br>
        - Arrays are faster than having to parse text files, but slower than databases.<br>
        - They are used with <code>array exampleArray = ["Hello", "World"]</code>
    </p>
</Layout>