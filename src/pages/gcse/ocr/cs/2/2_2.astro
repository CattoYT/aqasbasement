---
import Layout from "../../../../../layouts/Layout.astro";
import Table from "../../../../../components/Table.astro";
---

<Layout title="2.2 - Programming Fundamentals (Part 2)">
    <h1>2.2 - Programming Fundamentals (Part 2)</h1>
    <h2>String Manipulation</h2>
    <p>
        - Programs may have to modify, extract or analyse information from
        strings.<br>
        - Examples of string manipulation include:
        <ul>
            <li>Changing the case of a string</li>
            <li>Extracting a substring</li>
            <li>ASCII conversion</li>
            <li>Concatenation (con-cat-en-ation)</li>
            <li>Getting the length of a string</li>
        </ul>
    </p>
    <h3>Changing the case of a string</h3>
    <p>
        - <b>To change the case of a string</b>, use the <code>lower()</code> or
        <code>upper()</code> functions on a string.<br>
        - For example, with <code>exampleString = "Hello"</code>, 
        <code>exampleString.lower()</code> will return "hello".
    </p>
    <h3>Concatenation (con-cat-en-ation)</h3>
    <p>
        - <b>To concatenate two strings</b>, use the <code>+</code> operator.<br>
        - For example, <code>"Hello " + "World"</code> will return "Hello World".
        (Note the space within the "Hello " string.)
    </p>
    <h3>Extracting a substring</h3>
    <p>
        - <b>Extracting a substring</b> is different in OCR Exam Reference Language
        and Python.
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString.substring(0, 5) // "Hello"
exampleString.left(5) // "Hello"
exampleString.right(5) // "World"</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString[0:5] # "Hello"
exampleString[:5] # "Hello"
exampleString[5:] # "World"</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h3>ASCII conversion</h3>
    <p>
        - <b>To convert a string to ASCII</b>:
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
ASC("A") // 65
CHR(65) // A</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
ord("A") # 65
chr(65) # A</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h3>Getting the length of a string</h3>
    <p>
        - <b>To get the length of a string</b>:
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
exampleString.length // 11</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
exampleString = "Hello World"
len(exampleString) # 11</pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h2>File Handling</h2>
    <p>
        - To handle (read, write and append) files you must first open the file,
        then read/write, then close the file.<br>
        - (you'll need to scroll sideways to see second half the table if it doesn't fit on the screen, 
        you can do that with all tables but this is the first one that doesn't fit on a 1080p screen)
    </p>
    <div class="table-container">
        <table>
            <thead>
                <td>OCR Exam Reference Language</td>
                <td>Python</td>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <code>
                            <pre>
newFile("example.txt") // creates example.txt
file = open("example.txt") // opens example.txt

file.write("Hello World") // writes "Hello World" to example.txt
print(file.read()) // prints "Hello World" by first reading example.txt and then printing it

file.writeline("Line 1") // writes "Line 1" to example.txt at line 1
file.writeline("Line 2") // writes "Line 2" to example.txt at line 2
file.writeline("Line 4") // will still write "Line 4", but to line 3 (since no line 3 exists yet)

print(file.readline()) // prints "Line 1" by first reading example.txt and then printing it
print(file.readline()) // prints "Line 2"

file.close() // closes example.txt and frees up memory
</pre>
                        </code>
                    </td>
                    <td>
                        <code>
                            <pre>
file = open("example.txt", "w") # opens example.txt for writing, creates it if it doesn't exist
file.write("Hello World") # writes "Hello World" to example.txt
file.close() # closes example.txt and frees up memory

with open("example.txt", "r") as file: # opens example.txt for reading
    print(file.read()) # prints "Hello World"

file = open("example.txt", "a") # opens example.txt for appending, creates it if it doesn't exist
file.write("\nHello World") # appends "\nHello World" to example.txt (\n means newline)
file.close()

# readline and writeline are done the same way as OCR Reference Language
                            </pre>
                        </code>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <br>
    <h2>Records to Store Data</h2>
    <p>
        - Sometimes you will need to store data in a record, for example, if you
        need to store the name and age of a person.
    </p>
    <h3>Databases</h3>
    <p>
        - A database is a collection of fields (one slot of data) and records 
        (a collection of fields all for one thing), 
        each record is a set of data
        stored in a particular format.<br>
        - Most of the time databases use 'tables' to store records.<br>
        - Databases are faster and more secure than simply using text files.
    </p>
    <h3>Text Files</h3>
    <p>
        - Text files can be used to store data but this is not recommended for 
        large datasets due to having to parse them and issues with splitting text.
    </p>
    <h3>Arrays</h3>
    <p>
        - Arrays are useful when working with small amounts of data, 
        for example, a list of names, or a list of numbers.<br>
        - Arrays are faster than having to parse text files, but slower than databases.<br>
        (covered in the next section)
    </p>
    <br>
    <h2>SQL</h2>
    <p>
        - SQL (Structured Query Language) is a language used to interact with a 
        <abbr title="Database Management System">DBMS</abbr>.<br>
        - Pronounced "sequel", or "ess queue ell".<br>
        - SQL is used to manage and manipulate data stored in databases.<br>
        - It allows users to create, read, update, and delete data, commonly known as CRUD operations.<br>
        - SQL is a standard language supported by many database systems such as MySQL, PostgreSQL, 
        SQLite, and Microsoft SQL Server (the intricacies of which are not important for GCSE).
    </p>
    <h3>Basic SQL Commands</h3>
    <p>
        There are several key SQL commands you should know (if you're doing last-minute 
        revision don't worry about most, the top 3 are the most important):
    </p>
    <ul>
        <li><b>SELECT</b> - Used to retrieve data from a database.</li>
        <li><b>FROM</b> - Specifies the table from which to retrieve or manipulate data.</li>
        <li><b>WHERE</b> - Adds a condition to filter the data.</li>
        <li><b>INSERT INTO</b> - Adds new records to a database.</li>
        <li><b>UPDATE</b> - Modifies existing records in a database.</li>
        <li><b>DELETE</b> - Removes records from a database.</li>
        <li><b>CREATE TABLE</b> - Creates a new table in the database.</li>
    </ul>
    <h3>Example SQL Queries</h3>
    <p>
        Here are some example queries to show how SQL works
        (using an example database):
    </p>
    <Table>
        <thead>
            <td>Name</td>
            <td>Age</td>
            <td>Grade</td>
        </thead>
        <tbody>
            <tr>
                <td>Bob</td>
                <td>18</td>
                <td>90</td>
            </tr>
            <tr>
                <td>Charlie</td>
                <td>17</td>
                <td>92</td>
            </tr>
            <tr>
                <td>Alex</td>
                <td>16</td>
                <td>75</td>
            </tr>
        </tbody>
    </Table>
    <div class="table-container"><!--Bruh this actually works as well-->
        <pre>
<b>1. Selecting data:</b>
{"SELECT * FROM students WHERE grade > 80;"}
-- This will retrieve all students who have a grade higher than 80.
    
<b>2. Inserting data:</b>
INSERT INTO students (name, age, grade) VALUES ('Alice', 16, 85);
-- This will add a new record for a student named Alice.
    
<b>3. Updating data:</b>
UPDATE students SET grade = 90 WHERE name = 'Alice';
-- This will update Alice's grade to 90.
    
<b>4. Deleting data:</b>
DELETE FROM students WHERE name = 'Alice';
-- This will remove Alice from the database.
        </pre>
    </div>
    <br>
    <h2>Arrays</h2>
    <p>
        - Arrays let you store a collection of data in a single variable.<br>
        - They come in multiple 'dimensions', the most common being 1D and 2D.
    </p>
    <h3>1D Arrays</h3>
    <p>
        - A 1D array is a single dimension array, for example:
        <code>array exampleArray = ["Hello", "World"]</code>.<br>
        - They are far more common than 2D arrays, and are used for storing 
        data that does not require tables.
    </p>
    <h4>OCR Exam Reference Language Example</h4>
    <div class="table-container">
        <code>
            <pre>
array emptyArray = [10] // You specify the size of the array
array exampleArray = ["Hello", "World", ""]
exampleArray[0] // "Hello"
exampleArray[1] // "World"

exampleArray[2] = "!" // Assigns "!" to the 3rd index

/* Loop through the array. This syntax isn't explicity defined 
in the OCR Exam Reference Language spec, but it should be fine. */
for item in exampleArray
    print(item) // prints "Hello", "World" and "!"
next item
            </pre>
        </code>
    </div>
    <h4>Python Example</h4>
    <div class="table-container">
        <code>
            <pre>
emptyArray = [] # You don't have to specify the size of the array
exampleArray = ["Hello", "World"]
exampleArray[0] # "Hello"
exampleArray[1] # "World"

exampleArray[2] = "!" # Assigns "!" to the 3rd index

# Loop through the array
for item in exampleArray:
    print(item) # prints "Hello", "World" and "!"
            </pre>
        </code>
    </div>
    <h3>2D Arrays</h3>
    <p>
        - A 2D array is a two-dimensional array.<br>
        - They are used for storing data that requires tables to visualise.<br>
        - The right index can be thought of as the column, and the left index 
        can be thought of as the row.
    </p>
    <h4>OCR Exam Reference Language Example</h4>
    <div class="table-container">
        <code>
            <pre>
array emptyArray = [10, 10] 
array exampleArray = ["Hello", "World"], ["!", "?"]
exampleArray[0, 0] // "Hello"
exampleArray[0, 1] // "World"
exampleArray[1, 0] // "!"
exampleArray[1, 1] // "?"
            </pre>
        </code>
    </div>
    <h4>Python Example</h4>
    <div class="table-container">
        <code>
            <pre>
exampleArray = [["Hello", "World"], # multi-line not required,
                ["!", "?"]]         # but it's easier to read
exampleArray[0][0] # "Hello"
exampleArray[0][1] # "World"
exampleArray[1][0] # "!"
exampleArray[1][1] # "?"
            </pre>
        </code>
    </div>
    <br>
    <h2>Functions and Prodecures</h2>
    <p>
        - Functions and Prodecures are a way to group together a set of instructions that can be 
        called multiple times.<br>
        - They help decompose a problem to make it easier to undestand and are used to help 
        duplicating code, improve maintainability and readability, and to perform calculations, 
        retireve data, or make decisions.<br>
        - They can take paramaters, which are values that are passed into the 
        function when it is called.<br>
        - Functions, but not prodecures, return values (variables), this is 
        done by assigning the return value to a variable.<br>
        - Functions can be called recursively, which means that a function can 
        call itself.
    </p>
    <Table>
        <thead>
            <td>OCR Exam Reference Language</td>
            <td>Python</td>
        </thead>
        <tbody>
            <tr>
                <td>
                    <code>
                        <pre>
function add(a, b)
    return a + b
endfunction

print(add(2, 3)) // 5

procedure add(a, b)
    print(a + b)
endprocedure

add(2, 3) // 5
                        </pre>
                    </code>
                </td>
                <td>
                    <code>
                        <pre>
function add(a, b):
    return a + b

print(add(2, 3)) # 5

def add(a, b):
    print(a + b)

add(2, 3) # 5
                        </pre>
                    </code>
                </td>
            </tr>
        </tbody>
    </Table>
    <br>
    <h3>Local vs Global Variables</h3>
    <p>
        - Local variables are only available within the function or prodecure 
        they are declared in.<br>
        - Global variables are available to all functions and prodecures.<br>
        - Variables outside functions and procedures are <i>automatically</i> global, 
        but variables inside functions and prodecures have to be made global with the <code>global</code>
        keyword.
    </p>
    <code>
        <pre>
function add(a, b):
    sum = a + b # local
    global globalsum
    globalsum = sum
    return sum

add(2, 3)
print(globalsum) # 5
print(sum) # not defined error
        </pre>
    </code>
    <br>
    <h2>Random Numbers</h2>
    <p>
        - Random numbers are used to simulate the randomness of the real world, for example, 
        to simulate the outcome of a dice roll, or the number of people in a room.<br>
    </p>
    <h3>OCR Exam Reference Language Example</h3>
    <code>
        <pre>
random_number = random(1, 6)
print(random_number)
        </pre>
    </code>
    <h3>Python Example</h3>
    <code>
        <pre>
import random

random_number = random.randint(1, 6)
print(random_number)
        </pre>
    </code>
</Layout>