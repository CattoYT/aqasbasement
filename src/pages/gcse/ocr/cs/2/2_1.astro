---
import Layout from '../../../../../layouts/Layout.astro';
---
<Layout title="2.2 - Programming Fundamentals (Part 1)">
    <h1>2.2 - Programming Fundamentals (Part 1)</h1>
    <h2>The use of variables, constants, operators, inputs, outputs and assignments</h2>
    <h3>Variables</h3>
    <p>
        - A <b>variable</b> is a storage location identified by a memory address and an associated 
        symbolic name (an identifier), which contains some known or unknown quantity of information referred to as a value.<br>
        - For example, a variable named 'cat' could store the value 'meow', and then you can access 'cat' to retrieve 'meow' later on in the code.
    </p>
    <h3>Assignments</h3>
    <p>
        - <b>Assignments</b> are the process of storing a value in a variable or constant. This is usually done using the equals sign (=).<br>
        - In programming languages, <code>cat = "meow"</code> is an assignment, and <code>cat</code> then contains "meow".
    </p>
    <h3>Constants</h3>
    <p>
        - A <b>constant</b> is a value that cannot be altered by the program during normal execution, i.e., the value is constant.<br>
        - It works the same as a variable, but it cannot be changed.<br>
        - While both OCR Exam Reference Language and Python assign variables with <code>variable = value</code>, Python uses <code>CONSTANT = value</code>
        for constants but OCR Exam Reference Language uses <code>const constant = value</code>.
    </p>
    <h3>Operators</h3>
    <p>
        - <b>Operators</b> are symbols that tell the compiler or interpreter to perform specific mathematical, 
        relational, or logical operations and produce a final result.<br>
        - There are many operators:
    </p>
    <h4>Arithmetic Operators</h4>
    <table>
        <tr>
            <!--
            {""} because astro is jsx now?
            -->
            <th>{"Operation"}</th>
            <th>{"Python Operator"}</th>
            <th>{"OCR Reference Language Operator"}</th>
            <th>{"Example (Python)"}</th>
            <th>{"Example (OCR Reference Language)"}</th>
        </tr>
        <tr>
            <td>{"Addition"}</td>
            <td>{"+"}</td>
            <td>{"+"}</td>
            <td>{"5 + 3"}</td>
            <td>{"5 + 3"}</td>
        </tr>
        <tr>
            <td>{"Subtraction"}</td>
            <td>{"-"}</td>
            <td>{"-"}</td>
            <td>{"5 - 3"}</td>
            <td>{"5 - 3"}</td>
        </tr>
        <tr>
            <td>{"Multiplication"}</td>
            <td>{"*"}</td>
            <td>{"*"}</td>
            <td>{"5 * 3"}</td>
            <td>{"5 * 3"}</td>
        </tr>
        <tr>
            <td>{"Division"}</td>
            <td>{"/"}</td>
            <td>{"/"}</td>
            <td>{"5 / 2"}</td>
            <td>{"5 / 2"}</td>
        </tr>
        <tr>
            <td>{"Quotient (division w/o remainder)"}</td>
            <td>{"//"}</td>
            <td>{"DIV"}</td>
            <td>{"5 // 2"}</td>
            <td>{"5 DIV 2"}</td>
        </tr>
        <tr>
            <td>{"Modulus (division remainder only)"}</td>
            <td>{"%"}</td>
            <td>{"MOD"}</td>
            <td>{"5 % 2"}</td>
            <td>{"5 MOD 2"}</td>
        </tr>
        <tr>
            <td>{"Exponentiation (power)"}</td>
            <td>{"**"}</td>
            <td>{"^"}</td>
            <td>{"5 ** 3"}</td>
            <td>{"5 ^ 3"}</td>
        </tr>
    </table>

    <h3>{"Comparison Operators"}</h3>
    <table>
        <tr>
            <th>{"Operation"}</th>
            <th>{"Operator (same across both)"}</th>
            <th>{"Example (same across both)"}</th>
        </tr>
        <tr>
            <td>{"Equal to"}</td>
            <td>{"=="}</td>
            <td>{"5 == 3"}</td>
        </tr>
        <tr>
            <td>{"Not equal to"}</td>
            <td>{"!="}</td>
            <td>{"5 != 3"}</td>
        </tr>
        <tr>
            <td>{"Greater than"}</td>
            <td>{">"}</td>
            <td>{"5 > 3"}</td>
        </tr>
        <tr>
            <td>{"Less than"}</td>
            <td>{"<"}</td>
            <td>{"5 < 3"}</td>
        </tr>
        <tr>
            <td>{"Greater than or equal to"}</td>
            <td>{">="}</td>
            <td>{"5 >= 3"}</td>
        </tr>
        <tr>
            <td>{"Less than or equal to"}</td>
            <td>{"<="}</td>
            <td>{"5 <= 3"}</td>
        </tr>
    </table>
    <h3>Inputs</h3>
    <p>
        - <b>Inputs</b> are the data or signals received by the system from the external environment, typically from a user or another system.<br>
        - Programs are useless without inputs because they can't interact with the outside world.
    </p>
    <h3>Outputs</h3>
    <p>
        - <b>Outputs</b> are the data or signals sent from the system to the external environment, typically to a user or another system.<br>
        - Programs are useless without outputs for the same reason.
    </p>
    <br>
    <h2>The Three Basic Programming Constructs</h2>
    <p>
        - The three basic programming constructs used to control the flow of a program are:
        <ul>
            <li>Sequence (program order)</li>
            <li>Selection (if/else)</li>
            <li>Iteration (while/for)</li>
        </ul>
    </p>
    <h3>Sequence</h3>
    <p>
        - <b>Sequence</b> is the order in which the instructions are executed.<br>
        - It's generally top-to-bottom line-by-line.<br>
        <code>
            name = input("What is your name? ") // this gets executed first<br>
            print(f"Hello + name + "!") // this gets executed second
        </code>
    </p>
    <h3>Selection</h3>
    <p>
        - <b>Selection</b> is when the flow of the program is changed based on a condition.<br>
        - Selection is best visualised with if/else statements.<br>
        <code>
            <pre>
name = input("What is your name? ")
if name == "John"
    print("Hello John!")
else
    print("Hello Not John!")
endif
            </pre>
        </code>
            - There are also switch/case (or match/case) statements used when you want to compare a value against multiple options.<br>
            - They're generally easier and more efficient when you have a lot of options to compare against, but if statements are more 
            flexible (you can't write <code>if word.length > 5</code> in a switch/case statement).
        <code>
            <pre>
name = input("What is your name? ")
switch name:
    case "John":
        print("Hello John!")
    case "Jane":
        print("Hello Jayne!")
    default:
        print("Hello Not John or Jayne!")
endswitch
            </pre>
        </code>
    </p>
    <h3>Iteration</h3>
    <p>
        - <b>Iteration</b> is when the flow of the program is repeated multiple times.<br>
        - It looks for a condition to be true, and if it is, it executes the code inside the loop.<br>
        - Iteration can be done with for or while loops.<br>
        <code>
            <pre>
for i = 1 to 10
    print(i)
next i
            </pre>
        </code>
        - This will print the numbers 1 to 10.<br>
        <code>
            <!--bruh jsx-->
            <pre>
{`while i < 10
    print(i)
    i = i + 1
endwhile`}
            </pre>
        </code>
        - This will also print the numbers 1 to 10, but it works differently.<br>
        - The for loop is saying 'do this 10 times', and the second is saying 'do this while i is less than 10' 
        (and then i is incremented by 1 inside the while loop).<br>
        - <code>while true</code> will always create an infinite loop, because true is always, well, true.
    </p>
    <br>
    <h2>Data Types</h2>
    <h3>Basic Data Types</h3>
    <p>
        - <b>Integer:</b> A whole number, used for counting or indexing.<br>
        - <b>Example:</b> 10, -4<br>
        - Converted to in both OCR Exam Reference Language and Python using <code>int()</code>
    </p>
    <p>
        - <b>Real (Float):</b> A number with a decimal point, used for measurements and calculations.<br>
        - <b>Example:</b> 3.14, -2.5<br>
        - Converted to in both OCR Exam Reference Language and Python using <code>float()</code>
    </p>
    <p>
        - <b>Boolean:</b> Represents two values: <code>true</code> or <code>false</code>, useful in decision-making.<br>
        - A 0 is <code>false</code>, and a 1 is <code>true</code> in binary.<br>
        - <b>Example:</b> true, false
    </p>
    <p>
        - <b>Character and String:</b> A character is a single letter, symbol, or digit. A string is a sequence of characters.<br>
        - <b>Example (Character):</b> 'A', '9'<br>
        - <b>Example (String):</b> "Hello", "123abc"<br>
        - Converted to using <code>str()</code> and <code>chr()</code>
    </p>
    <h3>Data Type Operations</h3>
    <p>
        - <b>Casting:</b> Converting one data type to another, such as changing a string to an integer or vice versa.<br>
        - <b>Example:</b> <code>int("5")</code>, <code>str(5)</code>
    </p>
    <p>
        - <b>Choosing Suitable Data Types:</b> Choose a data type based on the nature of the data. For example, use an integer for whole numbers, 
        a float for decimals, and a string for text. Boolean is ideal for binary choices.
    </p>
</Layout>