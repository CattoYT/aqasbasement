---
import Layout from '../../../../../layouts/Layout.astro';
---
<Layout title="2.1 - Algorithms (Part 2)">
    <h1>2.1 - Algorithms (Part 2)</h1>
    <h2>Inputs, outputs and processes for a problem</h2>
    <p>
        - Thinking algorithmically allows you to come up with a
        list of step-by-step instructions to solve a problem.<br>
        - You need to be able to identify inputs, outputs and processes.
    </p>
    <h3>Inputs</h3>
    <p>
        - Inputs are the data that you need to solve a problem.<br>
        - For example, if you were to solve the problem of finding the
        largest number in a list, you would need to know the list of
        numbers to find the largest number in.<br>
        - Input can come from places like the user, or from a file,
        or from a database, or from a network, or from sensors,
        or anything else you can think of.
    </p>
    <h3>Outputs</h3>
    <p>
        - Outputs are the result of the processing of the inputs through the
        algorithm.<br>
        - Continuing with the example, you would need to output the solution
        at the end of processing.<br>
        - Outputs can take forms such as text, numbers, images, sounds,
        or even trigger events.
    </p>
    <h3>Processes</h3>
    <p>
        - Processes are the steps that the algorithm takes to solve the problem.<br>
        - With the example of finding the largest number in a list, you would
        need to compare each number in the list, and if the current number is
        larger than the previous largest number, replace the previous largest
        number with the current number.<br>
        - Processes can be as simple as a single line of code, or as complex
        as a whole program.
    </p>
    <br>
    <h2>Structure Diagrams</h2>
    <p>
        - Structure diagrams are a visual representation of decomposition of a problem.<br>
        - They are also used to show the relationship between inputs, outputs
        and processes, and to show the flow of data through the algorithm.
    </p>
    <img src="/images/cs/structure_diagram.svg" alt="Structure Diagram (i mean if you 
    need the alt text you probably won't have to do this part of the test anyway)" class="centreimage">
    <br>
    <h2>Pseudocode</h2>
    <p>
        - Occassionally in an exam you will be asked to write your answer in pseudocode, 
        or read pseudocode.<br>
        - Pseudocode is a way of writing code that is not meant to be executed, but rather
        to show the logic of the code.<br>
        - For exams you should learn the OCR Exam Reference Language, which is a form of 
        pseudocode.<br>
        - <a href="https://www.ocr.org.uk/images/202654-pseudocode-guide.pdf">This document</a> 
        explains it quite well, so I won't rewrite it all here (the doc is from 2015 but 
        it's not like it's changed much since then).
    </p>
    <br>
    <h2>Flowcharts</h2>
    <p>
        - Flowcharts are a visual representation of the steps in a process.<br>
        - They are also used to show the flow of data through the algorithm.<br>
        - They use different symbols to represent what goes on in each step:
    </p>
    <img src="/images/cs/flowchart_symbols.png" alt="Flowchart Symbols" class="centreimage">
    <p>
        - Here is an example flowchart for a dice game:
    </p>
    <img src="/images/cs/flowchart.png" alt="Dice Game Flowchart" class="centreimage">
    <h3>(WIP)</h3>
</Layout>